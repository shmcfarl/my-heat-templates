heat_template_version: 2016-10-14

description: >
  HOT template to create a new neutron network plus a router to the public
  network, and for deploying two servers into the new network. 

parameters:
  key_name:
    type: string
    description: Name of keypair to assign to servers
    default: aio-key
  image:
    type: string
    description: Name of image to use for servers
    default: FC23-Nginx-Docker-CL   
  flavor:
    type: string
    description: Flavor to use for servers
    default: m1.small
  public_net_id:
    type: string
    description: ID or name of public network for which floating IP addresses will be allocated
    default: Public-Network
  private_net_name:
    type: string
    description: Name of private network to be created
    default: test_net
  private_net_cidr:
    type: string
    description: Private network address (CIDR notation)
    default: 10.10.30.0/24
  private_net_gateway:
    type: string
    description: Private network gateway address
    default: 10.10.30.1
  private_net_pool_start:
    type: string
    description: Start of private network IP address allocation pool
    default: 10.10.30.2
  private_net_pool_end:
    type: string
    description: End of private network IP address allocation pool
    default: 10.10.30.254
  private_net_v6:
    type: string
    description: Private IPv6 subnet address
    default: 2001:db8:cafe:1e::/64
  private_net_v6_gateway:
    type: string
    description: Private network gateway address
    default: 2001:db8:cafe:1e::1
  private_net_v6_pool_start:
    type: string
    description: Start of private network IP address allocation pool
    default: 2001:db8:cafe:1e::2
  private_net_v6_pool_end:
    type: string
    description: End of private network IP address allocation pool
    default: 2001:db8:cafe:1e:ffff:ffff:ffff:fffe
resources:
  private_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_name }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      allocation_pools:
        - start: { get_param: private_net_pool_start }
          end: { get_param: private_net_pool_end }

  private_v6_subnet:
    type: OS::Neutron::Subnet
    properties:
      ip_version: 6
      ipv6_address_mode: slaac
      ipv6_ra_mode: slaac
      network: { get_resource: private_net }
      cidr: { get_param: private_net_v6 }
      gateway_ip: { get_param: private_net_v6_gateway }
      allocation_pools:
        - start: { get_param: private_net_v6_pool_start }
          end: { get_param: private_net_v6_pool_end }

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net_id }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: router }
      subnet: { get_resource: private_subnet }

  router_interface_v6:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: router }
      subnet: { get_resource: private_v6_subnet }

  server1:
    type: OS::Nova::Server
    properties:
      name: Server1
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - network: { get_resource: private_net }
      config_drive: "true"
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        # insert local commands here
      security_groups: [{ get_resource: server_security_group }]

  server2:
    type: OS::Nova::Server
    properties:
      name: Server2
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - network: { get_resource: private_net }
      config_drive: "true"
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        # insert local commands here
      security_groups: [{ get_resource: server_security_group }]
  
  server_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Heat-deployed security group.
      name: heat-security-group
      rules: [
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: tcp,
        port_range_min: 22,
        port_range_max: 22},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: icmp},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: tcp,
        port_range_min: 80,
        port_range_max: 80},
        {remote_ip_prefix: "::/0",
        ethertype: IPv6,
        protocol: tcp,
        port_range_min: 22,
        port_range_max: 22},
        {remote_ip_prefix: "::/0",
        ethertype: IPv6,
        protocol: icmp},
        {remote_ip_prefix: "::/0",
        ethertype: IPv6,
        protocol: tcp,
        port_range_min: 80,
        port_range_max: 80}]

  monitor:
    type: OS::Neutron::LBaaS::HealthMonitor
    properties:
      type: TCP
      delay: 5
      max_retries: 5
      timeout: 5
      pool: { get_resource: pool }
  
  listener:
    type: OS::Neutron::LBaaS::Listener
    properties:
      protocol: HTTP
      protocol_port: 80
      loadbalancer: { get_resource: lb }
    
  pool:
    type: OS::Neutron::LBaaS::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      listener: { get_resource: listener }
      protocol: HTTP

  lb:
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
      vip_subnet: { get_resource: private_subnet }

  member:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_resource: pool }
      address: {get_attr: [server1, first_address]}
      protocol_port: 80
      subnet: { get_resource: private_subnet }
  member1:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_resource: pool }
      address: {get_attr: [server2, first_address]}
      protocol_port: 80
      subnet: { get_resource: private_subnet }
